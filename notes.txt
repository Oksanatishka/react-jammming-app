-------------------- Project: Jammming --------------------
Task: https://www.codecademy.com/paths/web-development/tracks/front-end-applications-with-react/modules/jammming/projects/jammming-prj
You will use your knowledge of React components, passing state, and requests with the Spotify API to 
build a website that allows users to search the Spotify library, create a custom playlist, then save it to their Spotify account.

Create a React Application
    *****
    Summary: create a boilerplate react app, remove unused files, and add reset.css, Google font links, and an updated favicon.
    *****
    1. Create a new React application in a directory called Jammming.
    2. In index.html, update the <title> value to Jammming.
    3. Remove App.test.js and logo.svg from the src/ folder, as you will not use them in this project.
    4. Add reset.css to the public/ directory and link to it in index.html.
    5. Link to the following Google fonts in index.html: Poppins, Work Sans
    6. Update favicon.ico with this image.
Create Static Components (App, SearchBar, SearchResults, Playlist, TrackList, Track)
    *****
    Summary: create a JavaScript file and a CSS file for each of six components, write the JSX for each component.
    *****
    1. Create a src/Components directory to hold the components.
    2. Create a directory called App/ in the Components/ directory.
        Move App.js and App.css to the App/ folder and update the path in index.js accordingly.
        Additionally add this background image to the directory as well — it is used by the CSS file.
    3. Inside of the App.js .render() method, add a return statement with JSX that renders this HTML. Change all class attributes to className.
    Insert HTML and CSS code provided by codecademy for all components. Import .css file into .js.
    Playlist.js: Change the value property to defaultValue and set it equal to {'New Playlist'}
    TrackList.js: For now, you will hard code three tracks. In a later assessment, we will replace the hard-coded values with tracks from Spotify.
    Track.js: Create a method called renderAction that displays a <button> element with - as its content if the isRemoval property is true, and a + <button> element if the isRemoval property is false. Set the class name to Track-action.
Pass Down Search Result and Render Result List
    *****
    Summary: pass the state of a search results parameter through a series of components to render an array of tracks.
    *****
    // passing props from-to: App.js -> SearchResults.js -> TrackList.js -> Track.js
    When a user requests data from Spotify, the JSON response will include a set of song tracks. Each track will contain a field for name, artist, and album. For each track in the results list, your Jammming web app will display the song name, artist, and album.
    1. Add a constructor function to the App component, and pull in props from the React.Component class.
    2. Inside of the App component, set a hard-coded initial value for this.state.searchResults (it will be an array containing track objects).
    3. Pass the state of the App component’s searchResults to the SearchResults component.
    4. Pass the search results from the SearchResults component to the TrackList component.
        Hint: Inside the SearchResults.js .render() method, pass this.props.searchResults as an attribute called tracks in the TrackList component.
    5. In the TrackList component, use the .map() method to render each track in the tracks property.
        Set the key attribute to track.id.
        Hint: Inside the TrackList component’s render method, use .map() on this.props.tracks to render each track in the list. This will require you to pass the current track as an attribute called track to the Track component.
    6. Render the track name, artist, and album.
Pass down Playlist to TrackList
    *****
    Summary: pass the state of a user’s custom playlist title and tracks from the App component down to components that render them.
    *****
    // passing props from-to: App.js -> Playlist.js 
    When a user adds songs from the search results list to their playlist, a method will update the state of a playlist parameter in App.js, and Jammming will render the song in the user’s playlist.
    1. Add hard-coded values for playlistName and playlistTracks to state in App.js.
    2. Pass the playlist name and tracks from the App component to the Playlist component.
    3. Pass the playlist tracks from the Playlist component to the TrackList component.
Add Tracks to a Playlist
    *****
    Summary: implement a process(addTrack method) for adding a song from the search results track list to the user’s custom playlist.
    *****
    // passing props from-to: App.js -> SearchResults.js -> TrackList.js
    1. In App.js create a method called addTrack with the following functionality:
        Accepts a track argument
        Use the track’s id property to check if the current song is in the playlistTracks state.
        If the id is new, add the song to the end of the playlist.
        Set the new state of the playlist
    2. Bind the current value of this to .addTrack(). Pass .addTrack() to the SearchResults component as an onAdd attribute.
    3. Pass onAdd from the SearchResults component to the TrackList component.Pass isRemoval with a value of false down to TrackList.
    4. Pass onAdd from the TrackList component to the Track component.
    5. Create an .addTrack() method in the Track component. Use it to add this.props.track to the playlist.
        Hint: Pass this.props.track to this.props.onAdd.
    6. Add a constructor to the Track component. Call super(props) in the constructor method.
        Bind this.addTrack() to the current value of this in the constructor method.
    7. In the Track.js + element, add an onClick property with the value set to this.addTrack.
Remove Tracks from a Playlist
    *****
    Summary: implement a process that removes a song from a user’s custom playlist
    *****
    // passing props from-to: App.js -> Playlist.js -> TrackList.js -> Track.js
    1. In App.js create a method called removeTrack with the following functionality:
        Accepts a track argument
        Uses the track’s id property to filter it out of playlistTracks
        Sets the new state of the playlist
    2. In the App constructor method, bind the current value of this to .removeTrack().
        Pass .removeTrack() to the Playlist component as an onRemove attribute.
    3. Pass onRemove from the Playlist component to the TrackList component.
        Pass isRemoval with a value of true down to TrackList.
    4. Pass onRemove and isRemoval from the TrackList component to the Track component.
    5. Create a .removeTrack() method in the Track component. Use it to remove this.props.track from the playlist.
        Hint: Pass this.props.track to this.props.onRemove.
    6. In Track.js, bind this.removeTrack() to the current value of this in the constructor method.
    7. In the Track.js - element, add an onClick property with the value set to the this.removeTrack method.
Change the Name of a Playlist
    *****
    Summary: implement code that allows a learner to change the name of their playlist, and save the updated value to the App component’s state.
    *****
    // passing props from-to: App.js -> Playlist.js ->
    1. In App.js create a method called updatePlaylistName with the following functionality:
        Accepts a name argument
        Sets the state of the playlist name to the input argument
    2. In the App constructor method, bind this to .updatePlaylistName().
        Pass updatePlaylistName to the Playlist component as an attribute named onNameChange.
    3. In the Playlist component, create a method called handleNameChange.
        The method should accept an event that is triggered by an onChange attribute in the Playlist component’s <input> element.
        Inside the method, call .onNameChange() with the event target’s value (from the <input> element).
    4. Add a constructor to the Playlist component. Call super(props) in the constructor method.
        Bind the current value of this to .handleNameChange().
    5. In the Playlist render method, pass .handleNameChange() to an onChange property.
Create a Method that Saves the Playlist to a User's Account
    *****
    Summary: access a track property named uri, create an array containing the uri of each track in the playlistTracks property.
    *****
    // passing props from-to: App.js -> Playlist.js ->
    In this section, you will create a method that will save a user’s playlist to their Spotify account and resets the state of the playlist name and tracks array.
    https://developer.spotify.com/documentation/web-api/
    1. In App.js create a method called savePlaylist with the following functionality:
        Generates an array of uri values called trackURIs from the playlistTracks property.
        In a later step, you will pass the trackURIs array and playlistName to a method that will save the user’s playlist to their account.
    2. Bind the current value of this to .savePlaylist().
        Pass savePlaylist to the Playlist component as an attribute called onSave.
    3. In the Playlist.js SAVE TO SPOTIFY button element, add an onClick property with the value set to this.props.onSave.
Hook up Search Bar to Spotify Search
    *****
    Summary: write the logic that allows a user to enter a search parameter, receives a response from the Spotify API, and updates the searchResults state with the results from a Spotify request.
    *****
    // passing props from-to: App.js -> SearchBar.js
    1. In App.js create a method called search with the following functionality:
        Accepts a search term
        Logs the term to the console
        In a later assessment, we will hook this method up to the Spotify API.
    2. In the App constructor method, bind this to .search(). In a later assessment, we will use this in .search().
        Pass .search() to the SearchBar component as an onSearch attribute.
    3. In SearchBar.js, create a method called search that passes the state of the term to this.props.onSearch.
    4. In the SearchBar component, create a constructor method with a call to super(props).
        Inside of the constructor, bind the current value of this to .search().
    5. In SearchBar.js create a method called handleTermChange with the following functionality:
        Accepts an event argument
        Sets the state of the search bar’s term to the event target’s value.
    6. In the SearchBar.js constructor method, bind the current value of this to this.handleTermChange.
    7. In the search bar’s <input> element, add an onChange attribute and set it equal to this.handleTermChange.
Obtain a Spotify Access Token
    *****
    Summary: register a Spotify application and create a method called getAccessToken in the Spotify module.
    *****
    Spotify Authentication guide https://developer.spotify.com/documentation/general/guides/authorization-guide/
    1. Create a src/util directory and add a file called Spotify.js
    2. In Spotify.js create a Spotify module as an empty object. At the bottom of Spotify.js export Spotify.
    3. Above the empty object, declare an empty variable that will hold the user’s access token.
    4. Inside the Spotify module, create a method called getAccessToken.
        Check if the user’s access token is already set. If it is, return the value saved to access token.
    5. If the access token is not already set, check the URL to see if it has just been obtained.
        You will be using the Implicit Grant Flow to setup a user’s account and make requests. The implicit grant flow returns a user’s access token in the URL.
        Use the guide to determine how to parse the URL and set values for your access token and expiration time.
        Hint: 
            In the implicit grant flow, values for the access token and expiration time are in the URL parameter after authentication.
            Use window.location.href and the .match() method to retrieve the access token and expiration time from the URL.
            Example URL from Spotify API:
            https://example.com/callback#access_token=NwAExz...BV3O2Tk&token_type=Bearer&expires_in=3600&state=123
            Use the .match() method on the URL string. Provide the regular expressions below as inputs:
            /access_token=([^&]*)/
            /expires_in=([^&]*)/
        Answer:
            const userAccessTokenMatch = window.location.href.match(/access_token=([^&]*)/);
            const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);
    6. If the access token and expiration time are in the URL, implement the following steps:
        Set the access token value
        Set a variable for expiration time
        Set the access token to expire at the value for expiration time
        Clear the parameters from the URL, so the app doesn’t try grabbing the access token after it has expired
        Hint:
            Use the following code to help you wipe the access token and URL parameters
                window.setTimeout(() => accessToken = '', expiresIn * 1000);
                window.history.pushState('Access Token', null, '/');
        Answer: 
            if (userAccessTokenMatch && expiresInMatch) {
                userAccessToken = userAccessTokenMatch[1];
                const expiresIn = Number(expiresInMatch[1]);
                // This clears the parameters, allowing us to grab a new access token when it expires
                window.setTimeout(() => (userAccessToken = ''), expiresIn * 1000);
                window.history.pushState('Access Token', null, '/');
            }
    7. The third condition is that the access token variable is empty and is not in the URL.
        Before you write this conditional code block, you need to register your application using the Spotify application registration flow.
        Give your application a relevant name and description. Also, add the following Redirect URI:
        http://localhost:3000/
        Answer:
            Go to https://developer.spotify.com/dashboard/applications -> My new app -> 
                App Name: react-jamming, 
                App Description: an educational app that will allow users to save songs to a playlist
                What are you building?: website
                Are you developing a commercial integration?: no, non-commercial (we are not going to monetize app)
                Click yes on all boxes, and submit
                Edit Settings -> Redirect URIs: http://localhost:3000
    8. At the top of Spotify.js create constant variables for your application’s client ID and redirect URI.
        Set the client ID variable to the value provided on your application page.
        Set the redirect URI to "http://localhost:3000/".
        Answer:
            const clientId = '1abd49735694401c8cce39b34c91b0c5';
            const redirectUri = 'http://localhost:3000/';
    9. Back in your conditional statement, redirect users to the following URL:
        https://accounts.spotify.com/authorize?client_id=CLIENT_ID&response_type=token&scope=playlist-modify-public&redirect_uri=REDIRECT_URI
        Interpolate your client ID and redirect URI variables In place of CLIENT_ID and REDIRECT_URI.
        Hint:
            To redirect a user, you must set window.location to the URL in the task above.
        Answer:
            else {
                const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;
                window.location = accessUrl;
            }
Implement Spotify Search Request
    *****
    Summary: create a method in Spotify.js that accepts a search term input, passes the search term value to a Spotify request, then returns the response as a list of tracks in JSON format.
    *****
    1. In the Spotify object, add a method called search that accepts a parameter for the user’s search term.
        .search() returns a promise that will eventually resolve to the list of tracks from the search.
        Answer: search(searchTerm) {},
    2. Inside .search(), start the promise chain by returning a GET request (using fetch()) to the following Spotify endpoint:
        https://api.spotify.com/v1/search?type=track&q=TERM
        Replace the value of TERM with the value saved to the search term argument.
        Add an Authorization header to the request containing the access token.
        Hint:
            You will need to pass a second argument to the fetch method. The second argument is an object with one field called headers. Set headers to an object with one Authorization property with the user’s access token. Use the format in step four of the implicit grant flow.
            Pass the following object as the second fetch parameter:
            {headers: {Authorization: `Bearer ${accessToken}`}}
    3. Convert the returned response to JSON.
        Then, map the converted JSON to an array of tracks. If the JSON does not contain any tracks, return an empty array.
        The mapped array should contain a list of track objects with the following properties:
            ID — returned as track.id
            Name — returned as track.name
            Artist — returned as track.artists[0].name
            Album — returned as track.album.name
            URI — returned as track.uri
        Answer:
            .then((response) => {
                return response.json();
            })
            .then((jsonResponse) => {
                if (!jsonResponse.tracks) {
                    return [];
                }
                return jsonResponse.tracks.items.map((track) => ({
                    id: track.id,
                    name: track.name,
                    artist: track.artists[0].name,
                    album: track.album.name,
                    uri: track.uri,
                }));
            });
    4. In App.js, import Spotify and update the .search() method with the Spotify.search() method.
        Update the state of searchResults with the value resolved from Spotify.search()‘s promise.
        Answer:
            Spotify.search(search_term).then((searchResults) => {
                this.setState({ searchResults: searchResults });
            });
Save a User's Playlist
    *****
    Summary: create a method called savePlaylist that writes the learner’s custom playlist in Jammming to their Spotify account.
    *****
    1. Create a method in Spotify.js that accepts two arguments. The first argument is the name of the playlist. The second is an array of track URIs.
        Inside the function, check if there are values saved to the method’s two arguments. If not, return.
    2. Create three default variables:
        An access token variable, set to the current user’s access token
        A headers variable, set to an object with an Authorization parameter containing the user’s access token in the implicit grant flow request format
        An empty variable for the user’s ID
    3. Make a request that returns the user’s Spotify username.
        Convert the response to JSON and save the response id parameter to the user’s ID variable.
        Hint:
            Make the request to the following Spotify endpoint: https://api.spotify.com/v1/me
            You must pass a second argument with an object containing the headers object. See below    
            {headers: headers}
    4. Use the returned user ID to make a POST request that creates a new playlist in the user’s account and returns a playlist ID.
        Use the Spotify playlist endpoints(https://developer.spotify.com/documentation/web-api/reference/playlists/) to find a request that creates a new playlist.
        Set the playlist name to the value passed into the method.
        Convert the response to JSON and save the response id parameter to a variable called playlistID.
        Hint:
            Make a request to the following Spotify endpoint:
            /v1/users/{user_id}/playlists
            You must pass a second argument that contains an object with parameters for headers, method, and body.
    5. Use the returned user ID to make a POST request that creates a new playlist in the user’s account and returns a playlist ID.
        Use the Spotify playlist endpoints to find a request that adds tracks to a playlist.
        Set the URIs parameter to an array of track URIs passed into the method.
        Convert the response to JSON and save the response id parameter to a variable called playlistID.
        Hint:
            Make a request to the following Spotify endpoint:
            /v1/users/{user_id}/playlists/{playlist_id}/tracks
            You must pass a second argument that contains an object with parameters for headers, method, and body.
    6. In App.js update the .savePlaylist() method to call Spotify.savePlaylist().
        After you call Spotify.savePlaylist(), reset the state of playlistName to 'New Playlist' and playlistTracks to an empty array.
    // Test app.
Deploy (Optional)
    *****
    Summary: use surge to deploy your Jammming project.
    *****
    1. you will use surge https://surge.sh/ to deploy your Jammming project.
        You will start by installing surge globally.
        In your console, run 'npm install --global surge'.
    2. Before you deploy, you need to think of a domain name with the following format:
        SOME_NAME.surge.sh      // SOME_NAME can be replaced with anything you like.
        Next, you need to replace or add this URI to two locations in your project:
            In *Spotify.js, set redirectUri to your new domain
            In your Spotify application, add your new domain as a redirect URI
    3. Back in the command line, from the Jammming project’s root directory, run:
        $ npm run build
    4. cd into the build directory and run the command
        $ surge
        Follow the steps on the screen. Change the domain value to your new URI.
        Congrats! You’ve just deployed a React App that queries the Spotify API!
Feature (Optional)
    Technical design document template https://docs.google.com/document/d/1QIBjLcNH5t7FrPwuC7jNnhE1JPmwskdB7U7z0OSeDsU/edit
    Example of a technical design document for implementing multiple playlists in Jammming https://docs.google.com/document/d/1bHEQvYYAwSpAkdpv7hp8eu-iMnvqYVS4UffCLKvaKGg/edit
Potential Jammming Features:
    - Include preview samples for each track
    - Only display songs not currently present in the playlist in the search results
    - Add a loading screen while playlist is saving
    - Update the access token logic to expire at exactly the right time, instead of setting expiration from when the user initiates their next search
    - After user redirect on login, restoring the search term from before the redirect
    - Ensure playlist information doesn’t get cleared if a user has to refresh their access token
